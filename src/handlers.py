import logging
import asyncio

from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from keyboards import main_menu, instruction_menu, traps_menu, signal_menu, unregistered_menu, time_menu
from aiogram.types import FSInputFile

from utils import generate_random_values, reg_check, get_random_trend
from aiogram import Bot

logger = logging.getLogger(__name__)
main_router = Router()


@main_router.message(Command("start"))
async def start_handler(message: Message):
    text = (f"üòé –ü—Ä–∏–≤–µ—Ç!\n"
            f"\n"
            f"ü§ñ –Ø - —Ç–æ—Ä–≥–æ–≤—ã–π —Ä–æ–±–æ—Ç, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ ChatGPT 4.5, –≤ —Å–≤—è–∑–∫–µ —Å 15 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏.\n"
            f"\n"
            f"üö® –ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.")

    photo = FSInputFile("images/main_menu.jpg")

    await message.answer_photo(
        photo=photo,
        caption=text,
        reply_markup=main_menu
    )
    username = message.from_user.username
    logger.info(f"{username} –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é")

@main_router.callback_query(lambda c: c.data == "btn2")
async def instruction_handler(callback: CallbackQuery):
    await callback.message.delete()

    text = (f"ü§ñ –ë–æ—Ç –æ—Å–Ω–æ–≤–∞–Ω –∏ –æ–±—É—á–µ–Ω –Ω–∞"
            f" –º–∏–æ–∫–ª–æ–Ω–∏—á–µ—Å–∫–æ–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"
            f" OpenAI!"
            f"–î–ª—è –æ–±—É—á–µ–Ω–∏—è –±–æ—Ç–∞ –±—ã–ª–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ 30,000\n"
            f"—Å–¥–µ–ª–æ–∫ –Ω–∞ –º–∞—Ä–∫–µ—Ç–µ."
            f"–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞"
            f"—É—Å–ø–µ—à–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç 15-25% –æ—Ç —Å–≤–æ–µ–≥–æ"
            f"–∫–∞–ø–∏—Ç–∞–ª–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ! üé∞\n"
            f"üü¢ 1. –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç PoketOption"
            f"(–ö–ù–û–ü–ö–ê –°–ù–ò–ó–£)\n"
            f"‚ùóÔ∏è –ë–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø –∫ —Å–∏–≥–Ω–∞–ª–∞–º –Ω–µ"
            f"–±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç ‚ùóÔ∏è\n"
            f"üü¢ 2. –í–Ω–µ—Å—Ç–∏ –¥–µ–ø–æ–∑–∏—Ç –æ—Ç 5000–†.\n"
            f"üü¢ 3. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ —Å–∏–≥–Ω–∞–ª —É –±–æ—Ç–∞ –∏ —Å—Ç–∞–≤—å—Ç–µ"
            f"—Å—Ç–∞–≤–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ –æ—Ç"
            f" –±–æ—Ç–∞.")

    await callback.message.answer(
        text,
        reply_markup=instruction_menu  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    username = callback.from_user.username
    logger.info(f"{username} —á–∏—Ç–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@main_router.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main_handler(callback: CallbackQuery):
    await callback.message.delete()
    await callback.answer()

    await start_handler(callback.message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üöÄ –í–´–î–ê–¢–¨ –°–ò–ì–ù–ê–õ"
@main_router.callback_query(lambda c: c.data == "btn3")
async def send_signal_handler(callback: CallbackQuery):
    username = callback.from_user.username.lower()
    if not await reg_check(username, callback=callback):
        if callback.message and callback.message.message_id:
            try:
                await callback.message.delete()
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

        await callback.message.answer_photo(
            caption=(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞!\n‚óè –ü—Ä–æ–π–¥–∏—Ç–µ"
            f" —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
            f" —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –í–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ —Å–∏–≥–Ω–∞–ª–∞–º."),
            reply_markup=unregistered_menu,  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            photo=FSInputFile("images/unreg.jpg"),
        )
        logger.info(f"{username} –±–∞–π—Ç –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    else:
        await callback.message.delete()  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info(f"{username} –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É")
        text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É üëá"
        await callback.message.answer(
            text,
            reply_markup=traps_menu  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ


@main_router.callback_query(lambda c: c.data.startswith("time_"))
async def traps_selected_handler(callback: CallbackQuery):
    await callback.message.delete()
    first_message = await callback.message.answer(
        "‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...\n(—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è)"
    )
    await asyncio.sleep(2)
    await first_message.delete()

    second_message = await callback.message.answer(
        "üåê –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º Binarium –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ\n\n"
        "üìä –ü—Ä–æ–≤–æ–∂—É –∞–Ω–∞–ª–∏–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏ –ø–æ–∏—Å–∫ —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞ –ø–æ –∞–∫—Ç–∏–≤—É\n\n"
        "‚è∞ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è ~15 —Å–µ–∫—É–Ω–¥" # –ó–î–ï–°–¨ –ú–ï–ù–Ø–ï–ú –ó–ê–î–ï–†–ñ–ö–£ –î–û –°–ò–ì–ù–ê–õ–ê –ë–û–¢–ê
    )
    await asyncio.sleep(2) # –ó–î–ï–°–¨ –ú–ï–ù–Ø–ï–ú –ó–ê–î–ï–†–ñ–ö–£ –î–û –°–ò–ì–ù–ê–õ–ê –ë–û–¢–ê
    await second_message.delete()

    base_chance, max_chance, reversal_chance, volatility = generate_random_values()

    trend, smile = get_random_trend()

    final_message = (
        f"üëÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ª–∏–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω –∞–Ω–∞–ª–∏–∑ —Å–≤—è–∑–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤\n\n"
        f"üìà –í –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ—Ç—Ä–µ–∑–∫–µ –≥—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—Ä–µ–Ω–¥ {trend}\n\n"
        f"‚úîÔ∏è –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞: {base_chance} - {max_chance} %\n"
        f"üîÑ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞: {reversal_chance} %\n"
        f"üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –≥—Ä–∞—Ñ–∏–∫–∞: {volatility}%\n\n"
        f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—Ö–æ–¥–∏—Ç—å –≤ —Å–¥–µ–ª–∫—É {trend}"
    )

    await callback.message.answer(final_message, reply_markup=signal_menu)

    logger.info(f"{callback.from_user.username} –ø–æ–ª—É—á–∏–ª —Å–∏–≥–Ω–∞–ª")


# –•–µ–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ "üîÑ –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"
@main_router.callback_query(lambda c: c.data == "btn_new_signal")
async def new_signal_handler(callback: CallbackQuery):
    await traps_selected_handler(callback)  # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Ö–µ–Ω–¥–ª–µ—Ä –∑–∞–Ω–æ–≤–æ

# –•–µ–Ω–¥–ª–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Å–ø—Ä–∏—Ä–∞—Ü–∏–∏
@main_router.callback_query(lambda c: c.data.startswith("traps"))
async def time_selected_handler(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ üëá",
        reply_markup=time_menu
    )
    await callback.answer()
    logger.info(f"{callback.from_user.username} –≤—ã–±–∏—Ä–∞–µ—Ç –≤—Ä–µ–º—è")