import logging

from aiogram import F, Router
from aiogram.types import Message
from aiogram.filters import Command
from src.keyboards import main_menu, confirm_product, wishlist_kb, \
    confirm_delete_producs
from aiogram.types import FSInputFile, CallbackQuery
from db.users import add_user, save_product_and_link_user, get_wish_list, \
    delete_product_from_wishlist
from aiogram.fsm.context import FSMContext
from src.states import LinkInput
from parser.parser import parse_goldapple_product

logger = logging.getLogger(__name__)
main_router = Router()


@main_router.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    await state.clear()
    text = (f"–ó–æ–ª–æ—Ç–æ–µ —è–±–ª–æ–∫–æ —á–µ–µ–µ–µ–∫")

    photo = FSInputFile("src/images/main_menu.jpg")

    await message.answer_photo(
        photo=photo,
        caption=text,
        reply_markup=main_menu
    )
    tg_id = message.from_user.id
    username = message.from_user.username or f"id_{tg_id}"

    await add_user(tg_id, username)
    logger.info(f"{username} –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é")

@main_router.callback_query(F.data == "add_product")
async def handle_links_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:")
    await state.set_state(LinkInput.waiting_for_link)

@main_router.message(LinkInput.waiting_for_link)
async def handle_link_input(message: Message, state: FSMContext):
    user_link = message.text.strip()

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É
    await message.answer(f"–°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {user_link}, –ø–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ...")

    product_data = parse_goldapple_product(user_link)
    print(f"—Å–ø–∞—Ä—Å–∏–ª–∏: {product_data}")

    await state.update_data(product_data=product_data, url=user_link)
    await state.set_state(LinkInput.waiting_for_confirmation)

    #ToDo —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    await message.answer(
        f"<b>–ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä:</b>\n"
        f"üè∑ <b>–ë—Ä–µ–Ω–¥:</b> {product_data.get('brand') or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
        f"üîπ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product_data.get('name') or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {product_data.get('price') or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'} ‚ÇΩ",
        parse_mode="HTML",
        reply_markup=confirm_product
    )

@main_router.callback_query(F.data.in_({"confirm_product", "cancel_product"}))
async def handle_confirmation(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    if callback.data == "confirm_product":
        await save_product_and_link_user(
            tg_id=callback.from_user.id,
            product_data=data["product_data"],
            url=data["url"]
        )
        await callback.message.edit_text("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
    else:
        await callback.message.edit_text("‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    await state.clear()
    await start_handler(callback.message, state)


@main_router.callback_query(F.data == "wish_list")
async def handle_wishlist(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()

    products = await get_wish_list(callback.from_user.id)

    if not products:
        text = "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤."
        return

    kb = wishlist_kb(products)

    await callback.message.answer(
        "<b>üõç –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ </b>\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å:",
        reply_markup=kb,
        parse_mode="HTML"
    )

@main_router.callback_query(F.data.startswith("delete_"))
async def handle_delete_product(callback: CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split("_")[1])

    await state.update_data(product_id_to_delete=product_id)

    await callback.message.answer(
        "‚ùóÔ∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã?",
        reply_markup=confirm_delete_producs,
    )

@main_router.callback_query(F.data.in_({"confirm_delete", "cancel_delete"}))
async def confirm_delete_product(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    if callback.data == "confirm_delete":
        product_id = data["product_id_to_delete"]

        await delete_product_from_wishlist(callback.from_user.id, product_id)
        await callback.message.delete()
        await callback.message.answer("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")
    else:
        await callback.message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    await state.clear()

    products = await get_wish_list(callback.from_user.id)

    await callback.message.answer(
        "üõç –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:",
        reply_markup=wishlist_kb(products)
    )
