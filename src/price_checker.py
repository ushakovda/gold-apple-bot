# src/services/price_checker.py
import asyncio
from parser.parser import parse_goldapple_product
from db.products import get_all_tracked_products, update_product_price, \
    get_user_by_product, increase_all_prices_by
from aiogram import Bot

CHECK_INTERVAL = 3600  # –æ–¥–∏–Ω —á–∞—Å

async def check_prices_loop(bot: Bot):
    while True:
        print("[INFO] –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω...")
        await increase_all_prices_by(200.0)
        print("[DEBUG] –í—Å–µ —Ü–µ–Ω—ã —É–≤–µ–ª–∏—á–µ–Ω—ã –Ω–∞ 200 —Ä—É–±.")
        products = await get_all_tracked_products()
        print(f"[DEBUG] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

        for product in products:
            url = product["url"]
            old_price = float(product["price"])
            new_data = parse_goldapple_product(url)
            new_price = float(new_data.get("price", 0))

            if new_price and new_price != old_price:
                await update_product_price(product["id"], new_price)

                if new_price < old_price:
                    # –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user = await get_user_by_product(product["id"])
                    if user:
                        text = (
                            f"üí∏ <b>–¶–µ–Ω–∞ –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π —Ç–æ–≤–∞—Ä —Å–Ω–∏–∑–∏–ª–∞—Å—å!</b>\n\n"
                            f"üè∑ <b>–ë—Ä–µ–Ω–¥:</b> {product['brand']}\n"
                            f"üîπ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product['name']}\n"
                            f"üìâ <b>–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞:</b> {old_price} ‚ÇΩ\n"
                            f"üí∞ <b>–ù–æ–≤–∞—è —Ü–µ–Ω–∞:</b> {new_price} ‚ÇΩ\n"
                            f"üîó <a href=\"{url}\">–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</a>"
                        )
                        print("–ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ—É —é–∑–µ—Ä—É {user}")
                        await bot.send_message(user["tg_id"], text, parse_mode="HTML", disable_web_page_preview=True)

        await asyncio.sleep(CHECK_INTERVAL)
